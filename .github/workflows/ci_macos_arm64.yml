name: CI macOS ARM64
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]
  schedule:
    - cron: '0 1 * * *'
permissions:
  contents: read
env:
  BUNDLE_RETRY: 6
  BUNDLE_JOBS: 4
jobs:
  build_install:
    timeout-minutes: 30
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Install Bash 4+ and Kerberos
        run: |
          brew install bash krb5
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
      - name: Set up Ruby
        uses: ruby/setup-ruby@a4effe49ee8ee5b8b5091268c473a4628afb5651 # v1.245.0
        with:
          ruby-version: '3.4'  # Use one Ruby version for building
          bundler-cache: false
      - name: Build gem with mini_portile
        run: |
          set -e
          bundle install --jobs 4 --retry 3
          cd ext && bundle exec rake
          cd ..
      - name: Upload built gem and bundle
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: rdkafka-built-gem-macos
          path: |
            vendor/bundle/
            .bundle/
            ext/
            lib/
          retention-days: 1

  specs_install:
    timeout-minutes: 30
    runs-on: macos-latest
    needs: build_install
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Download built gem
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: rdkafka-built-gem-macos
          path: ./
      - name: Install Bash 4+ and Kerberos
        run: |
          brew install bash krb5
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
      - name: Install and Start Confluent Kafka (KRaft)
        run: |
          # Install Java 11+
          brew install openjdk@11
          
          # Add Java to PATH
          export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
          export JAVA_HOME="/opt/homebrew/opt/openjdk@11"
          
          echo "Java version:"
          java -version
          
          # Try a simpler approach - use Confluent Platform via direct download
          echo "Downloading Confluent Platform (full)..."
          CONFLUENT_VERSION="7.7.2"
          curl -O "https://packages.confluent.io/archive/7.7/confluent-${CONFLUENT_VERSION}.tar.gz"
          
          echo "Extracting Confluent Platform..."
          tar -xzf "confluent-${CONFLUENT_VERSION}.tar.gz"
          
          # Set up Confluent environment
          export CONFLUENT_HOME="$(pwd)/confluent-${CONFLUENT_VERSION}"
          export PATH="$CONFLUENT_HOME/bin:$PATH"
          
          echo "CONFLUENT_HOME: $CONFLUENT_HOME"
          echo "Contents of CONFLUENT_HOME:"
          ls -la "$CONFLUENT_HOME"
          
          # Check for the required jar files
          echo "Looking for confluent-common jar files:"
          find "$CONFLUENT_HOME" -name "*confluent-common*" -type f || echo "No confluent-common files found"
          
          cd "$CONFLUENT_HOME"
          
          # Skip the CLI for now and start Kafka directly using scripts
          echo "Starting Kafka directly with KRaft mode..."
          
          # Generate cluster ID for KRaft
          CLUSTER_ID=$(bin/kafka-storage random-uuid)
          echo "Generated cluster ID: $CLUSTER_ID"
          
          # Create KRaft configuration
          mkdir -p /tmp/kraft-combined-logs
          
          # Format the storage
          bin/kafka-storage format -t "$CLUSTER_ID" -c etc/kafka/kraft/server.properties
          
          # Start Kafka in KRaft mode in background
          bin/kafka-server-start etc/kafka/kraft/server.properties &
          KAFKA_PID=$!
          
          echo "Started Kafka with PID: $KAFKA_PID"
          echo "Waiting for Kafka to be ready..."
          sleep 20
          
          # Wait for Kafka to be ready with retry logic
          for i in {1..30}; do
            echo "=== Attempt $i/30 ==="
            
            echo "Testing kafka-topics command..."
            if bin/kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1; then
              echo "✅ Kafka topics command succeeded!"
              break
            else
              echo "❌ Kafka topics command failed (exit code: $?)"
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Kafka failed to start after 30 attempts"
              echo "Checking if Kafka process is running:"
              ps aux | grep kafka || echo "No Kafka processes found"
              echo "Checking logs:"
              tail -20 logs/server.log || echo "No server.log found"
              exit 1
            fi
            
            echo "Sleeping 2 seconds..."
            sleep 2
          done
          
          echo "🎉 Confluent Kafka (KRaft mode) is ready for testing!"

  build_precompiled:
    timeout-minutes: 45
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Install Bash 4+ and Kerberos
        run: |
          brew install bash krb5
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
      - name: Cache build-tmp directory
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ext/build-tmp-macos
          key: build-tmp-${{ runner.os }}-${{ hashFiles('ext/*.sh', 'ext/Rakefile') }}-v2
      - name: Build precompiled librdkafka for macOS ARM64
        run: |
          cd ext
          /opt/homebrew/bin/bash ./build_macos_arm64.sh
      - name: Upload precompiled library
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: librdkafka-precompiled-macos
          path: ext/
          retention-days: 1

  specs_precompiled:
    timeout-minutes: 30
    runs-on: macos-latest
    needs: build_precompiled
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Download precompiled library
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: librdkafka-precompiled-macos
          path: ext/
      - name: Install Bash 4+ and Kerberos
        run: |
          brew install bash krb5
          echo "/opt/homebrew/bin" >> $GITHUB_PATH
      - name: Install and Start Confluent Kafka
        run: |
          # Install Java 11+ (required for Confluent Platform 8.0+)
          brew install openjdk@11
          
          # Install Confluent CLI
          brew install --cask confluent-cli
          
          # Set CONFLUENT_HOME environment variable
          export CONFLUENT_HOME="$HOME/.confluent"
          mkdir -p "$CONFLUENT_HOME"
          
          # Add Java to PATH
          export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
          export JAVA_HOME="/opt/homebrew/opt/openjdk@11"
          
          echo "Java version:"
          java -version
          
          echo "Setting up Confluent local environment..."
          echo "CONFLUENT_HOME=$CONFLUENT_HOME"
          
          # Start Confluent Platform services
          echo "Starting Confluent Platform services..."
          confluent local services start
          
          echo "Waiting for Kafka to be ready..."
          sleep 15
          
          echo "=== Confluent services status ==="
          confluent local services status
          
          # Wait for Kafka to be ready with retry logic
          for i in {1..30}; do
            echo "=== Attempt $i/30 ==="
            
            echo "Testing kafka-topics command..."
            if kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1; then
              echo "✅ Kafka topics command succeeded!"
              break
            else
              echo "❌ Kafka topics command failed (exit code: $?)"
            fi
            
            if [ $i -eq 30 ]; then
              echo "❌ Kafka failed to start after 30 attempts"
              confluent local services status
              exit 1
            fi
            
            echo "Sleeping 2 seconds..."
            sleep 2
          done
          
          echo "🎉 Kafka is ready for testing!"